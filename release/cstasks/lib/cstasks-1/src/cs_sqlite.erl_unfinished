%% Initially it was my intention to provide CRUD operations on tasks jobs and 
%% a storage facility. I couldn't finish this, however here there a storage facility 
%% based on sqlite.
%%
%% Why sqlite and not mnesia? I saw an oportunity to quickly demonstrate
%% creating a gen_server for reusing the same "connection" to sqlite instead of relying on
%% sqlite C driver capabilities to handle concurent access to the same sqlite database file.
%% That's why I chose the nif sqlite driver because it is lacking any advanced connection
%% management on the erlang side.
%%
%% Of course in a proper database driver a pool of database "connections"
%% will be more appropiate.
-module(cs_sqlite).
-author("Madalin Grigore-Enescu").

-include_lib("cstasks.hrl").

-behaviour(gen_server).

%% API
-export([
    start_link/0,
    job_update/1,
    job_delete/1,
    jobs_list/1
]).

%% gen_server Exports
-export([
    init/1,
    handle_call/3,
    handle_cast/2,
    handle_info/2,
    code_change/3,
    terminate/2
]).

-record(cs_srv_db_sqlite_state, {
    directory,
    connections,
    table_info_column_names
}).

-define(CS_DB_TASKS, "tasks").
-define(CS_DB_TASKS_TABLE_JOB, "job").
-define(CS_DB_SQLITE_SCHEMA, [
    {
        ?CS_DB_TASKS_TABLE_JOB,
        "CREATE TABLE IF NOT EXISTS job ("
        "id TEXT PRIMARY KEY NOT NULL, "
        "title TEXT DEFAULT NULL, "
        "unsorted_tasks BLOB DEFAULT NULL, "
        "sorted_tasks BLOB DEFAULT NULL, "
        "update_time INTEGER DEFAULT NULL"
        ");\n"
        "CREATE INDEX IF NOT EXISTS idx_create_time ON job(update_time);"
    }
]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% API
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% @doc Creates a gen_server process as part of a supervision tree.
%% The function should be called, directly or indirectly, by the supervisor.
%% It will, among other things, ensure that the gen_server is linked to the supervisor.
start_link() -> gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).

%% @doc Return database connection for the specified database name
get_connection(Name) ->
    gen_server:call(?MODULE, {get_connection, Name}, infinity).

%% @doc Update the specified tasks job.
%% Acts similar to a NoSQL database - create the job if does not exist, overwrite otherwise.
%% This way we can easily scale this in the future using Cassandra or CouchDb.
%% Not that the interview solution will ever scale but it's just more fun to design it this way :)
job_update(
    #cs_tasks_job{
        id = TasksJobId,
        title = TasksJobTitle,
        unsorted_tasks = TasksJobUnsortedTasks,
        sorted_tasks = TasksJobSortedTasks,
        update_time = TasksJobUpdateTime
    }
) ->
    {ok, Db} = get_connection(?CS_DB_TASKS),
    Sql =
        "INSERT INTO job (id, title, unsorted_tasks, sorted_tasks, update_time) "
        "VALUES (?, ?, ?, ?, ?) "
        "ON CONFLICT(id) DO UPDATE SET "
        "title = ?, "
        "unsorted_tasks = ?, "
        "sorted_tasks = ?, "
        "update_time = ?;",
    %% Execute the SQL statement and retrieve the new count
    case
        esqlite3:q(Db, Sql, [
            TasksJobId,
            TasksJobTitle,
            TasksJobUpdateTime,
            TasksJobTitle,
            TasksJobUnsortedTasks,
            TasksJobSortedTasks,
            TasksJobUpdateTime
        ])
    of
        {ok, [[NewCount]]} ->
            %% Return the new count if the operation was successful
            {ok, NewCount};
        Error ->
            Error
    end.

%% @doc Delete the specified tasks job.
job_delete(TasksJobId) ->
    {ok, Db} = get_connection(?CS_DB_TASKS),
    Sql = "DELETE FROM job WHERE id = ? LIMIT 1;",
    case esqlite3:q(Db, Sql, [TasksJobId]) of
        {ok, _} -> ok;
        Error -> Error
    end.

%% @doc List first HowMany tasks jobs
%% This can be improved to support some sort pagination
jobs_list(HowMany) ->
    {ok, Db} = get_connection(?CS_DB_TASKS),
    Sql = "SELECT * FROM job ORDER BY update_time DESC LIMIT ?;",
    case esqlite3:q(Db, Sql, [HowMany]) of
        {ok, Selected} ->
            jobs_list_selected(Selected);
        Error ->
            Error
    end.

jobs_list_selected(Selected) -> jobs_list_selected(Selected, []).
jobs_list_selected([_H | T], Acum) ->
    jobs_list_selected(T, Acum);
jobs_list_selected([], Acum) ->
    lists:reverse(Acum).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% INIT
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% @doc Init gen_server
%% Whenever a gen_server process is started using start/3,4 or start_link/3,4, this function is called by the new process to initialize.
%%
%% Args is the Args argument provided to the start function.
%% If the initialization is successful, the function is to return {ok,State}, {ok,State,Timeout}, or {ok,State,hibernate},
%% where State is the internal state of the gen_server process.
%%
%% If an integer time-out value is provided, a time-out occurs unless a request or a message is received within Timeout milliseconds.
%% A time-out is represented by the atom timeout, which is to be handled by the Module:handle_info/2 callback function.
%% The atom infinity can be used to wait indefinitely, this is the default value.
%%
%% If hibernate is specified instead of a time-out value, the process goes into hibernation when waiting for the next message to arrive
%% (by calling proc_lib:hibernate/3).
%%
%% If the initialization fails, the function is to return {stop,Reason}, where Reason is any term, or ignore.
init([]) ->
    DatabaseDirectory = cs_utils:directory_sqlite(),
    filelib:ensure_path(DatabaseDirectory),
    State = #cs_srv_db_sqlite_state{
        directory = DatabaseDirectory,
        connections = #{}
    },
    case f_open_databases(?CS_DB_SQLITE_SCHEMA, State) of
        {ok, NewState} ->
            {ok, NewState, infinity};
        Error ->
            {stop, Error}
    end.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% handle_call
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% @doc Handle gen_server calls
%% Whenever a gen_server process receives a request sent using call/2,3 or multi_call/2,3,4, this function is called to handle the request.
%%
%% Request is the Request argument provided to call or multi_call.
%% From is a tuple {Pid,Tag}, where Pid is the pid of the client and Tag is a unique tag.
%% State is the internal state of the gen_server process.
%%
%% If {reply,Reply,NewState} is returned, {reply,Reply,NewState,Timeout} or {reply,Reply,NewState,hibernate},
%% Reply is given back to From as the return value of call/2,3 or included in the return value of multi_call/2,3,4.
%% The gen_server process then continues executing with the possibly updated internal state NewState.
%%
%% For a description of Timeout and hibernate, see Module:init/1.
%%
%% If {noreply,NewState} is returned, {noreply,NewState,Timeout}, or {noreply,NewState,hibernate},
%% the gen_server process continues executing with NewState. Any reply to From must be specified explicitly using reply/2.
%%
%% If {stop,Reason,Reply,NewState} is returned, Reply is given back to From.
%%
%% If {stop,Reason,NewState} is returned, any reply to From must be specified explicitly using reply/2.
%% The gen_server process then calls Module:terminate(Reason,NewState) and terminates.

%%-----------------------------
%% get_connection
%%-----------------------------
handle_call(
    {get_connection, Name},
    _From,
    State = #cs_srv_db_sqlite_state{
        connections = Connections
    }
) ->
    case maps:get(Name, Connections, undefined) of
        undefined ->
            {reply, {error, not_found}, State};
        Db ->
            {reply, {ok, Db}, State}
    end;
%%-----------------------------
%% Handle any other call
%%-----------------------------
handle_call(Msg, From, State) ->
    ?CS_LOG_DEBUG(#{m => unhandled_call, msg => Msg, from => From}),
    {reply, error, State}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% handle_cast
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% @doc Handle gen_server casts
%% Whenever a gen_server process receives a request sent using cast/2 or abcast/2,3, this function is called to handle the request.
%% For a description of the arguments and possible return values, see Module:handle_call/3.

%% Handle any other cast
handle_cast(Msg, State) ->
    ?CS_LOG_DEBUG(#{m => unhandled_cast, msg => Msg}),
    {noreply, State}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% handle_info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% @doc Handle gen_server info
%% This function is called by a gen_server process when a time-out occurs or when it receives any other message
%% than a synchronous or asynchronous request (or a system message).
%% Info is either the atom timeout, if a time-out has occurred, or the received message.
%% For a description of the other arguments and possible return values, see Module:handle_call/3.

%% Handle any other info
handle_info(Info, State) ->
    ?CS_LOG_DEBUG(#{m => unhandled_info, info => Info}),
    {noreply, State}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% terminate/code_change
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% @doc Handle gen_server terminate
%%
%% This function is called by a gen_server process when it is about to terminate.
%% It is to be the opposite of Module:init/1 and do any necessary cleaning up.
%% When it returns, the gen_server process terminates with Reason. The return value is ignored.
%%
%% Reason is a term denoting the stop reason and State is the internal state of the gen_server process.
%%
%% Reason depends on why the gen_server process is terminating. If it is because another callback function has returned a stop tuple {stop,..},
%% Reason has the value specified in that tuple. If it is because of a failure, Reason is the error reason.
%%
%% If the gen_server process is part of a supervision tree and is ordered by its supervisor to terminate, this function is called with Reason=shutdown
%% if the following conditions apply:
%% - The gen_server process has been set to trap exit signals.
%% - The shutdown strategy as defined in the child specification of the supervisor is an integer time-out value, not brutal_kill.
%%
%% Even if the gen_server process is not part of a supervision tree, this function is called if it receives an 'EXIT' message from its parent.
%% Reason is the same as in the 'EXIT' message.
%% Otherwise, the gen_server process terminates immediately.
%%
%% Notice that for any other reason than normal, shutdown, or {shutdown,Term}, the gen_server process is assumed to terminate
%% because of an error and an error report is issued using error_logger:format/2.
terminate(Reason, #cs_srv_db_sqlite_state{
    connections = Connections
}) ->
    ?CS_LOG_DEBUG(#{m => terminate, reason => Reason}),
    %% Close all opened databases
    Fun = fun(_K, V, AccIn) ->
        esqlite3:close(V),
        AccIn
    end,
    maps:fold(Fun, undefined, Connections);
terminate(Reason, State) ->
    ?CS_LOG_WARNING(#{m => terminate_invalid_state, reason => Reason, state => State}),
    ok.

%% @doc Handle gen_server code change
%% This function is called by a gen_server process when it is to update its internal state during a release upgrade/downgrade,
%% that is, when the instruction {update,Module,Change,...}, where Change={advanced,Extra}, is specifed in the appup file.
%% For more information, see section Release Handling Instructions in OTP Design Principles.
%%
%% For an upgrade, OldVsn is Vsn, and for a downgrade, OldVsn is {down,Vsn}. Vsn is defined by the vsn attribute(s) of the old version
%% of the callback module Module. If no such attribute is defined, the version is the checksum of the Beam file.
%%
%% State is the internal state of the gen_server process.
%% Extra is passed "as is" from the {advanced,Extra} part of the update instruction.
%%
%% If successful, the function must return the updated internal state.
%% If the function returns {error,Reason}, the ongoing upgrade fails and rolls back to the old release.
code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% f_ various gen_server related functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% @doc Open the specified list of databases
f_open_databases([H | T], State) ->
    case f_open_database(H, State) of
        {ok, NewState} ->
            f_open_databases(T, NewState);
        Error ->
            Error
    end;
f_open_databases([], State) ->
    {ok, State}.

%% @doc Open the specified database
f_open_database(
    Db = {DbKey, _DbSchema},
    State = #cs_srv_db_sqlite_state{
        directory = Directory,
        connections = Connections
    }
) ->
    case maps:get(DbKey, Connections, undefined) of
        undefined ->
            URIPrefix = "file:" ++ filename:join(Directory, DbKey),
            f_open_database_rw(Db, URIPrefix, State);
        Db ->
            {ok, Db}
    end.

%% @doc Try to open existing database first
f_open_database_rw(Db, URIPrefix, State) ->
    URI = URIPrefix ++ "?mode=rw",
    ?CS_LOG_DEBUG(#{m => db_sqlite_open_rw, uri => URI}),
    case esqlite3:open(URI) of
        {ok, Connection} ->
            f_open_database_create_schema(Connection, Db, State);
        Error ->
            ?CS_LOG_DEBUG(#{m => db_sqlite_open_error, error => Error}),
            f_open_database_rwc(Db, URI, State)
    end.

%% @doc Create if not exist
f_open_database_rwc(Db, URIPrefix, State) ->
    URI = URIPrefix ++ "c",
    ?CS_LOG_DEBUG(#{m => db_sqlite_open_rwc, uri => URI}),
    case esqlite3:open(URI) of
        {ok, Connection} ->
            f_open_database_create_schema(Connection, Db, State);
        Error ->
            ?CS_LOG_DEBUG(#{m => db_sqlite_open_error, error => Error}),
            Error
    end.

f_open_database_create_schema(
    Connection,
    {DbKey, DbSchema},
    State = #cs_srv_db_sqlite_state{
        connections = Connections
    }
) ->
    ?CS_LOG_DEBUG(#{m => db_sqlite_create_schema, db_schema => DbSchema}),
    case esqlite3:q(Connection, DbSchema) of
        {error, Error} ->
            ?CS_LOG_DEBUG(#{m => db_sqlite_create_schema_error, error => Error}),
            esqlite3:close(Connection),
            Error;
        Result ->
            %% Succes: []
            ?CS_LOG_DEBUG(#{m => db_sqlite_create_schema, result => Result}),
            NewConnections = maps:put(DbKey, Connection, Connections),
            {ok, State#cs_srv_db_sqlite_state{
                connections = NewConnections
            }}
    end.
